1)input:7564168
example:seperate odd place integers: 5 4 6
you have to return a 4 digit otp by squaring the digits.
digits from above ex : 5 4 6
squares: 25,16,36
so otp should be:2516

input_string = input("Enter a number: ")
otp = ''
for i in range(0, len(input_string), 2):
    digit = int(input_string[i])
    squared_digit = digit ** 2
    otp += str(squared_digit)
while len(otp) < 4:
    otp = '0' + otp
print("OTP:", otp)



2)take the input from the user in the given format(consist of name and code) find the max digit from the code which is less or equal to the length of 
string and put that place char in final string, if there is no any digit found which not satisfy the condition that simply put 'x'.
#input:
abhishek:43848,mayur:3749,friend:3949,yeah:7878
#output:kueX

s=input()
los=s.split(',')
op=''
for i in los:
    nc=i.split(':')
    name=nc[0]
    code=nc[1]
    max=0
    for i in code:
        if int(i)>max and int(i)<=len(name):
           max=int(i)
    if max==0:
        op+='x'
    else:
        op+=name[max-1]
print(op)



3)display the output of parentheses that given(balanced brackets problem).

def demo(s):
    c=0
    l=[]
    for i in s:
        if i=='[' or i=='{' or i=='(':
            l.append(i)
            c+=1
            continue
        if len(l)==0:
            return c+1
        temp=l.pop()
        if temp=='(' and i==')':
            c+=1
        elif temp=='[' and i==']':
            c+=1
        elif temp=='{' and i=='}':
            c+=1
        else:
            return c+1
    if len(l)==0:
        return 0
    else:
        return c+1
        
s=input()
if_name=='_main':
    print(demo(s))



4)reverse the given string and keeping its special character at the same place.
example:
input:srin#ivas
output:savi#nirs

input_string = input("Enter a string: ")
letters = []
special_chars = []
for char in input_string:
    if char.isalpha():
        letters.append(char)
    else:
        special_chars.append(char)
letters.reverse()
output_string = ''
letter_index = 0
special_index = 0
for char in input_string:
    if char.isalpha():
        output_string += letters[letter_index]
        letter_index += 1
    else:
        output_string += special_chars[special_index]
        special_index += 1
print("Output:", output_string)



5)input:a string of comma separated numbers are given such that the numbers 4 and 7 are already avaliable in the list.
assumption:7 always comes after 4 in the given string.
number1=add all numbers which do not lie between 4 and 7(excluding 4 and 7)in the given input.
number2:numbers formed by cancatinating all numbers from 4 to 7(including 4n7)
output:sum of number1 and number2
example:2,5,1,4,3,2,7,8
number1:2+5+1+8=16
number2:'4'+'3'+'2'+'7'='4327'
output:16+4327=4343


6)two pointers approach:(2 pointers in one loop)
problem:#1 (two sum problem)
arr[]={2,3,5,7,10,12,15,20}
answer:4,6
explaination:retrun i and jth pointer positions whose sum of indexed values equals to target.

def two_sum(arr, target):
    left = 0
    right = len(arr) - 1

    while left < right:
        current_sum = arr[left] + arr[right]

        if current_sum == target:
            return left, right
        elif current_sum < target:
            left += 1
        else:
            right -= 1

    # If no such pair exists, return None or any other suitable indicator
    return None

# Test the function with the provided example
arr = [2, 3, 5, 7, 10, 12, 15, 20]
target = 16
result = two_sum(arr, target)

if result is not None:
    i, j = result
    print(f"Indices: {i}, {j}")
    print(f"Values: {arr[i]}, {arr[j]}")
else:
    print("No such pair found.")
