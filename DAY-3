/***FIND OUT THE SMALLEST MISSING POSITIVE INTEGER***/
#include <stdio.h>

int findSmallestMissingPositive(int nums[], int size) {
    int i;
    int positive_nums[size + 1];  // Create an array to mark positive numbers

    // Initialize the positive_nums array to 0
    for (i = 0; i < size + 1; i++) {
        positive_nums[i] = 0;
    }

    // Mark positive numbers in the positive_nums array
    for (i = 0; i < size; i++) {
        if (nums[i] > 0 && nums[i] <= size) {
            positive_nums[nums[i]] = 1;
        }
    }

    // Find the smallest missing positive integer
    for (i = 1; i <= size; i++) {
        if (positive_nums[i] == 0) {
            return i;
        }
    }

    // If all positive integers from 1 to size are present, return size + 1
    return size + 1;
}

int main() {
    int nums[] = {3, 4, -1, 1};
    int size = sizeof(nums) / sizeof(nums[0]);

    int result = findSmallestMissingPositive(nums, size);
    printf("The smallest missing positive integer is: %d\n", result);

    return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*)IN THE GIVEN ARRAY EVERY NUMBERS OCCURS TWICE ONE INTEGER OCCURS ONES

def findSingle(ar,n):
           res = ar[0]
           for i in range(1,n):
                    res = res ^ ar[i]
            return res
ar = [2,3,5,4,3,4,2,88]
print(findSingle(ar,len(ar)))
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*)SWAP 2 NUMBERS USING XOR:---


a = 100
b = 200

a = a ^ b
b = a ^ b
a = a ^ b

print("a:", a)
print("b:", b)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*)FOR THE GIVEN NUMBER N CHECK THE Kth WIDTH SET OR NOT:---

def is_kth_bit_set(n, k):
    mask = 1 << k
    return (n & mask) != 0
n = 25  
k = 3   
if is_kth_bit_set(n, k):
    print(f"The {k}th bit is set in {n}.")
else:
    print(f"The {k}th bit is not set in {n}.")
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*)GIVEN N PRINT THE XOR OF ALL NUMBERS:---

def xor_of_numbers(n):
    result = 0
    for i in range(1, n + 1):
        result ^= i
    return result
n = 5
result = xor_of_numbers(n)
print("XOR of all numbers from 1 to", n, "is:", result)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


