siamese method:
____________

def is_valid_parentheses(s):
    stack = []
    parentheses = {')': '(', '}': '{', ']': '['}

    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
        else:
            return False

    return len(stack) == 0

# Example usage:
input_string = "({[]})"
if is_valid_parentheses(input_string):
    print(f"{input_string} is a valid parentheses expression.")
else:
    print(f"{input_string} is not a valid parentheses expression.")


________________________________________________________________________________________________________________________________________________________



a =input()
if len(a)%2==1:
        print('not balanced')
else:        
    b=[]
    k=1
    if a[0]==')' or a[0]=='}' or a[0]==']':
        print('no')
    for i in a:
        if i=='(' or i =='[' or i=='{':
            b.append(i)
        elif i==')' or i==']' or i=='}' and len(b)!=0:
            if i==')'and b[-1]=='('and len(b)!=0:
                b.pop()
            elif i==']' and b[-1] =='['and len(b)!=0:
                b.pop()
            elif i=='}' and b[-1]=='{' and len(b)!=0:
                b.pop()
            else:
                k=2
    if k==2:
        print('not balanced')
    elif len(b)!=0:
        print('not balanced')
    else:
        print('balanced')
